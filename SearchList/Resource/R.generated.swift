//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `GithubRepositoriesListTableView`.
    static let githubRepositoriesListTableView = _R.nib._GithubRepositoriesListTableView()
    /// Nib `SearchGithubRepositoriesView`.
    static let searchGithubRepositoriesView = _R.nib._SearchGithubRepositoriesView()
    
    /// `UINib(name: "GithubRepositoriesListTableView", in: bundle)`
    static func githubRepositoriesListTableView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.githubRepositoriesListTableView)
    }
    
    /// `UINib(name: "SearchGithubRepositoriesView", in: bundle)`
    static func searchGithubRepositoriesView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchGithubRepositoriesView)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `GithubRepositoriesListViewController`.
    static let githubRepositoriesListViewController = _R.storyboard.githubRepositoriesListViewController()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `SearchGithubRepositoriesViewController`.
    static let searchGithubRepositoriesViewController = _R.storyboard.searchGithubRepositoriesViewController()
    
    /// `UIStoryboard(name: "GithubRepositoriesListViewController", bundle: ...)`
    static func githubRepositoriesListViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.githubRepositoriesListViewController)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "SearchGithubRepositoriesViewController", bundle: ...)`
    static func searchGithubRepositoriesViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.searchGithubRepositoriesViewController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _GithubRepositoriesListTableView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GithubRepositoriesListTableView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SearchGithubRepositoriesView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SearchGithubRepositoriesView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try searchGithubRepositoriesViewController.validate()
    }
    
    struct githubRepositoriesListViewController: Rswift.StoryboardResourceType {
      let bundle = R.hostingBundle
      let name = "GithubRepositoriesListViewController"
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct searchGithubRepositoriesViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SearchGithubRepositoriesViewController
      
      let bundle = R.hostingBundle
      let name = "SearchGithubRepositoriesViewController"
      let searchGithubRepositoriesViewController = StoryboardViewControllerResource<SearchGithubRepositoriesViewController>(identifier: "SearchGithubRepositoriesViewController")
      
      func searchGithubRepositoriesViewController(_: Void = ()) -> SearchGithubRepositoriesViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchGithubRepositoriesViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.searchGithubRepositoriesViewController().searchGithubRepositoriesViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchGithubRepositoriesViewController' could not be loaded from storyboard 'SearchGithubRepositoriesViewController' as 'SearchGithubRepositoriesViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
